name: 'Prepare New Release'
run-name:  Prepare New Release `${{ github.event.inputs.type }}/${{ github.event.inputs.version }}` from by @${{ github.actor }}

# **What it does**: Does release preparation: creates the release branch and the PR with a checklist.
# **Why we have it**: To support devs automating a few manual steps, and to leave a nice reference for consumers.

on:
  workflow_dispatch:
    inputs:
      ## In the future we could infer that version from the changelog, or bump it via major|minor|patch.
      version:
        description: 'Version number to be released'
        required: true
      type:
        description: 'Type of the release (release|hotfix)'
        required: true
        default: 'release'
      wp-version:
        description: 'WordPress tested up to'
      wc-version:
        description: 'WooCommerce tested up to'


jobs:
  PrepareRelease:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create branch & PR
        uses: woocommerce/grow/prepare-extension-release@actions-v2
        with:
          version: ${{ github.event.inputs.version }}
          type: ${{ github.event.inputs.type }}
          wp-version: ${{ github.event.inputs.wp-version }}
          wc-version: ${{ github.event.inputs.wc-version }}
          main-branch: 'trunk'
          pre-steps: |
            1. [ ] Remove older changelog entries from `readme.txt` (keep the last two versions, since we will be adding a third during the release), commit changes.
            1. [ ] If there are new database migration classes (under `src/DB/Migration/`), modify their applicable version set in the `get_applicable_version` class of each migration class to be the same value as the version that is to be released.
               :warning: Notice that `x.x.x` is not a valid version and should be set manually with the new version. So, for example, if we are releasing version 1.12.0 and there is a file `Migration20211228T1640692399.php` inside `src/DB/Migration/`, you should open that file and in the method `get_applicable_version` return `1.12.0`.
            1. [ ] :exclamation: If this release has updated composer packages, we should test [Composer package conflicts with other plugins](https://github.com/woocommerce/google-listings-and-ads/wiki/Smoke-tests#composer-package-conflicts-with-other-plugins).
