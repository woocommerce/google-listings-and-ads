/**
 * External dependencies
 */
import { addAction } from '@wordpress/hooks';

/**
 * Internal dependencies
 */
import { NAMESPACE, ACTION_PREFIX } from './constants';
import {
	getProductObject,
	retrievedVariation,
	trackAddToCartEvent,
} from './utils';

/* global jQuery */

// Hook into cart add item events sent from Gutenberg blocks.
// In WC >= 8.5 the product Proxy is the argument.
// In WC < 8.5 the product and the quantity are sent as arguments.
addAction( `${ ACTION_PREFIX }-cart-add-item`, NAMESPACE, ( data ) => {
	if ( ! data ) {
		return;
	}

	if ( data?.product ) {
		// WC < 8.5
		trackAddToCartEvent( data.product, data.quantity );
	} else {
		// WC >= 8.5
		trackAddToCartEvent( data, 1 );
	}
} );

/**
 * Handle add to cart clicks on any buttons shown in an archive loop.
 *
 * @param {Object} event Generated by addEventListener.
 */
const addToCartClick = function ( event ) {
	const data = event.currentTarget.dataset;
	const product = getProductObject( { id: data.product_id } );

	trackAddToCartEvent( product, data.quantity || 1 );
};

/**
 * Handle add to cart clicks for single product pages.
 *
 * @param {Object} event Generated by addEventListener.
 */
const singleAddToCartClick = function ( event ) {
	const cartForm = event.target.closest( 'form.cart' );
	if ( ! cartForm ) {
		return;
	}

	const addToCart = cartForm.querySelector( '[name=add-to-cart]' );
	if ( ! addToCart ) {
		return;
	}

	const variationId = cartForm.querySelector( '[name=variation_id]' );
	const quantity = cartForm.querySelector( '[name=quantity]' );

	const product = getProductObject( {
		id: parseInt( variationId ? variationId.value : addToCart.value, 10 ),
	} );

	trackAddToCartEvent(
		product,
		quantity ? parseInt( quantity.value, 10 ) : 1
	);
};

// Register for add_to_cart click events except for the buttons of Gutenberg blocks.
document.defaultView.addEventListener( 'DOMContentLoaded', function () {
	document
		.querySelectorAll(
			'.add_to_cart_button:not( .product_type_variable ):not( .product_type_grouped ):not( .wc-block-components-product-button__button )'
		)
		.forEach( ( button ) => {
			button.addEventListener( 'click', addToCartClick );
		} );

	/**
	 * Fix for Products (Beta) block
	 *
	 * Products (Beta) block doesn't trigger addAction events. Also it's not being queried by the previous query selector
	 * because we added :not( .wc-block-components-product-button__button ) to prevent tracking duplicates with
	 * other blocks that yes trigger addAction events.
	 *
	 * So the fix is to query again specifically the add to cart button in Products (Beta) block
	 */
	document
		.querySelectorAll(
			'[data-block-name="woocommerce/product-button"] > .add_to_cart_button:not( .product_type_variable ):not( .product_type_grouped )'
		)
		.forEach( ( button ) => {
			button.addEventListener( 'click', addToCartClick );
		} );

	document
		.querySelectorAll( '.single_add_to_cart_button' )
		.forEach( ( button ) => {
			button.addEventListener( 'click', singleAddToCartClick );
		} );
} );

// Register for jQuery event to update product data.
if ( typeof jQuery === 'function' ) {
	jQuery( document ).on(
		'found_variation',
		'form.cart',
		function ( event, variation ) {
			retrievedVariation( variation );
		}
	);
}
